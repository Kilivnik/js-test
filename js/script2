// завдання 1
//Создайте страницу, которая спрашивает имя у пользователя и выводит его.

//let name = prompt("Як вас звати?", "");
//alert (`Привіт ${name} !`);




// завдання 2
//Работа с переменными

//Объявите две переменные: admin и name.
//Запишите строку "Джон" в переменную name.
//Скопируйте значение из переменной name в admin.
//Выведите на экран значение admin, используя функцию alert (должна показать «Джон»).

//const name = "Джон";
//const admin = name;

//alert(admin);




// завдання 3
// Переведіть текст вигляду border-left-width до borderLeftWidth
// Напишіть функцію camelize(str), яка перетворює рядки «my-short-string» на «myShortString».
//
// Тобто дефіси віддаляються, а всі слова після них отримують велику букву.
//
// const camelize = (str) => {
//   const arr = str.split("-");
//   const result = arr.map((item, index) => {
//     if (index === 0) {
//       return item;
//     }
//     return item[0].toUpperCase() + item.slice(1);
//   });
//   return result.join("");
// };
// console.log(camelize("background-color"));
// console.log(camelize("list-style-image"));
// console.log(camelize("-webkit-transition"));

// camelize("background-color") == 'backgroundColor';
// camelize("list-style-image") == 'listStyleImage';
// camelize("-webkit-transition") == 'WebkitTransition';




// завдання 4
// Залишити унікальні елементи масиву
// важливість: 4
// Нехай arr – масив рядків.
// Напишіть функцію unique(arr), яка повертає масив,
// що містить лише унікальні елементи arr.

// let strings = [
//   "торт",
//   "тортик",
//   "кекс",
//   "сир",
//   "бутерброд",
//   "сир",
//   "шоколад",
//   "кекс",
//   "масло",
//   "олія",
//   "торт",
// ];

// Old-school
// function unique(arr) {
//   let result = [];

//   for (let str of arr) {
//     if (!result.includes(str)) {
//       result.push(str);
//     }
//   }

//   return result;
// }
// console.log(unique(strings));

// New school
// function unique(arr) {
//   return Array.from(new Set(arr));
// }
// console.log(unique(strings));




// завдання 5
// Напишіть дві функції
// letMeSeeYourName(callback) - запитує ім'я користувача
//через prompt і викликає функцію зворотного виклику
//greet(name) - колбек, який приймає ім'я і виводить в консоль
//рядок "Привіт <name>"
//Реалізуй перевірку, чи name не пустий рядок



// завдання 4
// Напишіть дві функції
//makeProduct(назва, ціна, callback) - приймає
//імя і ціну товару, а також функцію callback.
//Функція створює об'єкт товару, додає йому унікальний
//ідентифікатор у властивості id і викликає зворотний виклик
//передаючи йому створений об’єкт.
//showProduct(product) - callback приймає об'єкт
//продукта і виводить його в консоль



// завдання 5
// Виконай рефакторинг makeDish так, щоб не потрібно було
// щоразу передавати ім'я шефа.
// Напишіть функцію makeShef(shefName), яка повертає функцію
// makeDish(dish), що пам'ятає ім'я шефа при її виклику

// const makeDish = function (shefName, dish) {
//   console.log(`${shefName} is cooking ${dish}`);
// };

// makeDish("Mango", "apple pie");
// makeDish("Poly", "muffins");



// завдання 6
// Виправте помилки, щоб код працював
// const product = {
//   price: 5000,
//   showPrice() {
//     console.log(this.price);
//   },
// };
// console.log(product.price);



// завдання 7
// Виправте помилки, щоб код працював
// const product = {
//   price: 5000,
//   showPrice() {
//     console.log(this.price);
//   },
// };

// function callAction(action) {
//   action();
// }

// callAction(product.showPrice.bind(product));



// завдання 8
// Напишіть функцію each(array, callback), яка
// першим параметром приймає масив, а другим - функцію,
// яка застосовується до кожного елемента масиву.
// Функція each повинна повернути новий масив, елементами
// якого будуть результати виклику callback
// callback функції повинна множити елементи на 2


// const array = [1,2,3,4,5];

// function each (array, callback) {
//   const newArray =[];
//   for(let item of array) {
//     newArray.push(callback(item));
    
//   }
//   return newArray;
// }
 
// function multiplay ( value) {
//   return value * 2;
// }

// console.log(each(array, multiplay));




// завдання 9
// Напишіть функцію makeCounter, яка повертає іншу
// функцію, яка рахує та виводить в консоль кількість своїх викликів

// function makeCounter () {
//   let counter = 0;

//   return function getResult() {
  
//     return counter += 1;
//   }; 
// }
 
// const counter = makeCounter();
// console.log(counter());
// console.log(counter());
// console.log(counter());



// завдання 10
// Напишіть функцію, яка заповнює новий масив наданим значенням.
// Очікуваний результат: (3, 'a') => ['a', 'a', 'a']



// завдання 11
// Напишіть функцію filterRange(arr, a, b), яка приймає масив arr, шукає у ньому елементи між a та b і повертає масив цих елементів.
// Функція повинна повертати новий масив та не змінювати поточний.
// Наприклад:
//
// let arr = [5, 3, 8, 1];
// let filtered = filterRange(arr, 1, 4);
//
// alert (filtered); // 3,1 (збігаються значення)
// alert(arr); // 5,3,8,1 (без змін)


// завдання 12
// Сортувати у порядку за зменшенням
//
// let arr = [5, 2, 1, -10, 8];
//
// // ... ваш код для сортування за спаданням
//
// alert(arr); // 8, 5, 2, 1, -10


// завдання 13
// Напишіть функцію sortByAge(users), яка приймає масив об'єктів із властивістю age та сортує їх за ним.
// Наприклад:
//
// let bruce = {name: "Bruce", age: 25};
// let jhon = { name: "Jhon", age: 30};
// let maria = { name: "Maria", age: 28};
//
// let arr = [ bruce, jhon, maria ];
//
// sortByAge(arr);
//
// // тепер: [bruce, maria, jhon]
// alert(arr[0].name); // Bruce
// alert(arr[1].name); // Maria
// alert(arr[2].name); // Jhon



// завдання 14
// Перемешайте массив
// Напишіть функцію shuffle(array), яка перемішує (випадковим чином) елементи маси.
// Багатократні дії через shuffle можуть привести до різних послідовних елементів.
//
// let arr = [1, 2, 3];
//
// shuffle(арр);
// // arr = [3, 2, 1]
//
// shuffle(арр);
// // arr = [2, 1, 3]
//
// shuffle(арр);
// // arr = [3, 1, 2]
// // ...


// завдання 15
// Напишіть функцію, яка рахує кількість входжень значення в масив
// let arr = [2,4,3,1,2,1];
// Очікуваний результат: (arr, 1) => 2



// завдання 16
// Напишіть функцію, яка розгортає масив у зворотному порядку.
// Очікуваний результат: [1, 2, 3] => [3, 2, 1]


// завдання 17
// Напишіть функцію filterRangeInPlace(arr, a, b), яка приймає масив arr та видаляє з нього всі значення, крім тих, що знаходяться між a та b.
// Тобто перевірка має вигляд a ≤ arr[i] ≤ b.
// Функція повинна змінювати масив, що приймає, і нічого не повертати.
// Наприклад:
//
// let arr = [5, 3, 8, 1];
//
// filterRangeInPlace(arr, 1, 4); // видалені числа поза діапазоном 1..4
// alert(arr); // [3, 1]



// завдання 18
// Знайдіть суму елементів масиву
// let arr = [1,2,3,4];



// завдання 19
// Если мы перечислим все натуральные числа до 10, кратные 3 или 5, мы получим 3, 5, 6 и 9. 
//Сумма этих кратных равна 23.
//Найдите сумму всех чисел, кратных 3 или 5 меньше 1000.
//const number = 999;
//let sum = 0;
//for ( let i = 1; i <= number; i +=1 ) {
//    if( i % 3 === 0 || i % 5 === 0) {
//        console.log(i);
//        sum += i;
//    }
//    };
//    console.log(sum);


// завдання 20
// Напиши скрипт поиска логина, если есть виведи смс найден, если нет виведи смс не найден

const logins = ["ma4goDota", "poli1scute", "fkgnlnrm3ldfj"];
const loginToFinde = "poli1scute";

// через for
//let message = `${loginToFinde} не найден`;
//for (let login of logins) {
//    if (login === loginToFinde) {
//        message = `${loginToFinde} найден`;
//       break;
//   }
//}
//console.log(message);

// или второй вариант через тернарник 
const message = logins.includes(loginToFinde) 
//    ? 'найден'  
//   : 'не найден';
//console.log(message);


//завдання 21
//Найди самое большое число в масиве, числа уникальные

//const numbers = [10, 15, 36, 8, 99, 1, 37];
//let maxNumber = numbers[0];

//console.table(numbers);
 
//for(let number of numbers) {
//    if(number > maxNumber) {
//        maxNumber = number;
//        
//    }
//}
//console.log("maxNumber: ", maxNumber);


// Ось HTML-файл з кнопкою надіслати.
// Змініть стиль тексту абзацу за допомогою коду JavaScript
//
//
// <!DOCTYPE html>
// <html>
// <head>
// <meta charset=utf-8 />
//   <title>JS DOM paragraph style</title>
// </head>
// <body>
// <p id ='text'>JavaScript Exercises - w3resource</p>
// <div>
//   <button id="jsstyle">Style</button>
// </div>
// </body>
// </html>
//
// При натисканні на кнопку буде змінено шрифт, розмір шрифту та колір тексту абзацу.

// Напишіть функцію JavaScript, щоб отримати значення імені та прізвища наступної форми.
//
// <!DOCTYPE html>
// <html><head>
// <meta charset=utf-8 />
//   <title>Return first and last name from a form</title>
// </head><body>
// <form id="form1">
//   First name: <input type="text" name="fname" value="David"><br>
//   Last name: <input type="text" name="lname" value="Beckham"><br>
//   <input type="submit" value="Submit">
// </form>
// </body>
// </html>

// Напишіть програму на JavaScript для встановлення кольору фону абзацу

// <html>
// <head>
//   <meta charSet=utf-8/>
//   <title>Set the background color of a paragraph</title>
// </head>
// <body>
//   <button type="button">Click to set paragraph background color</button>
//   <p>JavaScript Exercises</p>
//   <p>Python Exercises</p>
// </body>
// </html>

// Ось HTML-файл з кнопкою надіслати.
// Напишіть функцію JavaScript, щоб отримати значення атрибутів href, rel, target і type для вказаного посилання

// <!DOCTYPE html>
// <html>
// <head>
// <meta charset=utf-8 />
//   </head>
// <body>
// <p><a id="w3r" type="text/html" rel="nofollow" target="_self" href="https://www.w3resource.com/">w3resource</a></p>
// <button>Click here to get  attributes value</button>
// </body></html>

// Напишіть функцію JavaScript для додавання рядків до таблиці.

// <!DOCTYPE html>
// <html>
// <head><meta charset=utf-8 />
//   <title>Insert row in a table</title>
// </head>
// <body>
// <table id="sampleTable" border="1">
//   <tr><td>Row1 cell1</td>
//     <td>Row1 cell2</td></tr>
//   <tr><td>Row2 cell1</td>
//     <td>Row2 cell2</td></tr>
// </table><br>
//   <input type="button" value="Insert row">
// </body>
// </html>

// Напишіть функцію JavaScript, яка приймає рядок, стовпець
// (щоб ідентифікувати конкретну клітинку) і рядок для оновлення вмісту цієї клітинки.

// <!DOCTYPE html>
// <html><head><meta charset=utf-8 />
//   <title>Change the content of a cell</title>
// </head><body>
// <table id="myTable" border="1">
//   <tr><td>Row1 cell1</td>
//     <td>Row1 cell2</td></tr>
//   <tr><td>Row2 cell1</td>
//     <td>Row2 cell2</td></tr>
//   <tr><td>Row3 cell1</td>
//     <td>Row3 cell2</td></tr>
// </table><form>
//   <input type="button" value="Change content">
// </form></body></html>

// Напишіть функцію JavaScript, яка створює таблицю,
//   приймає номери рядків,
//   стовпців від користувача та вводить номер рядка-стовпця як вміст (наприклад, рядок-0 стовпець-0) клітинки.

// Напишіть програму JavaScript для видалення елементів зі спадного списку.

// <!DOCTYPE html>
// <html><head>
// <meta charset=utf-8 />
//   <title>Remove items from a dropdown list</title>
// </head><body><form>
//   <select id="colorSelect">
//     <option>Red</option>
//     <option>Green</option>
//     <option>White</option>
//     <option>Black</option>
//   </select>
//   <input type="button" value="Select and Remove">
// </form>
// </body>
// </html>


<p>[<a href="#" onMouseOver="highlight()" onMouseOut="return_normal()">On mouse over here bold words of the following
//   paragraph will be highlighted</a>]</p>
// <p><strong>We</strong> have just started <strong>this</strong> section for the users (<strong>beginner</strong> to
//   intermediate) who <strong>want</strong> to work with <strong>various</strong> JavaScript <strong>problems</strong> and
//   write scripts online to <strong>test</strong> their JavaScript <strong>skill</strong>.</p>


// Напишіть програму на JavaScript, щоб отримати ширину та висоту вікна (щоразу, коли розмір вікна змінюється).

// <!DOCTYPE html>
// <html>
// <head>
// <meta charset=utf-8 />
//   <title>Window Size : height and width</title>
// </head>
// <!-- Resize the window (here output panel) and see the result !-->
// <body onload="getSize()" onresize="getSize()">
// <div id="wh">
//   <!-- Place height and width size here! -->
// </div>
// <body>
// </body>
// </html>


// const select = document.querySelector("#colorSelect");
// const button = document.querySelector(".btn");

// const { forEach } = require("lodash");

// console.dir(select);

// button.addEventListener("click", () => {
//   const selected = select.selectedIndex;
//   console.log(selected);
//   select.remove(selected);
// });

// Напишіть програму JavaScript для відображення випадкового зображення
//(натискання кнопки) з наступного списку.
//
// "https://images.pexels.com/photos/462024/pexels-photo-462024.jpeg?cs=srgb&dl=pexels-pixabay-462024.jpg&fm=jpg", width: "240", height: "160"
// "https://images.pexels.com/photos/1089168/pexels-photo-1089168.jpeg?cs=srgb&dl=pexels-nathan-cowley-1089168.jpg&fm=jpg", width: "320", height: "195"
// "https://images.pexels.com/photos/1300510/pexels-photo-1300510.jpeg?cs=srgb&dl=pexels-nathan-cowley-1300510.jpg&fm=jpg", width: "500", height: "343"

// const imagesList = [
//   {
//     url: "https://images.pexels.com/photos/462024/pexels-photo-462024.jpeg?cs=srgb&dl=pexels-pixabay-462024.jpg&fm=jpg",
//     width: "240",
//     height: "160",
//   },
//   {
//     url: "https://images.pexels.com/photos/1089168/pexels-photo-1089168.jpeg?cs=srgb&dl=pexels-nathan-cowley-1089168.jpg&fm=jpg",
//     width: "320",
//     height: "195",
//   },
//   {
//     url: "https://images.pexels.com/photos/1300510/pexels-photo-1300510.jpeg?cs=srgb&dl=pexels-nathan-cowley-1300510.jpg&fm=jpg",
//     width: "500",
//     height: "343",
//   },
// ];

// const newList = imagesList
//   .map(
//     ({ url, width, height }) =>
//       `<img src="${url}" width="${width}" height="${height}">`
//   )
//   .join("");

// const ul = document.createElement("ul");
// ul.innerHTML = newList;
// const body = document.querySelector("body");
// body.appendChild(ul);

// const pAll = document.querySelectorAll("p");
// console.log(pAll);

// const link = pAll[0].querySelector("a");
// console.log(link);

// const strongText = pAll[1];
// console.log(strongText);

// const newText = strongText.querySelectorAll("strong");
// console.log(newText);

// link.addEventListener("mouseout", () => {
//   console.log("mouseout");
//   chengeColor("black");
// });

// link.addEventListener("mouseover", (event) => {
//   console.log("mouseover");
//   console.log(event);
//   chengeColor("red");
// });

// const chengeColor = (color) => {
//   newText.forEach((item) => {
//     item.style.color = color;
//   });
// };

// Даний список повідомлень із кнопками для видалення [x]. Напишіть код, щоб кнопки працювали.
//
// <!DOCTYPE HTML>
// <html>
//
// <head>
// <link rel="stylesheet" href="messages.css">
//   <meta charset="utf-8">
//   </head>
//
// <body>
//
// <div id="container">
//   <div class="pane">
//     <h3>Lorem Ipsum</h3>
//     <p> Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. </p>
//     <button class="remove-button">[x]</button>
//   </div>
//   <div class="pane">
//     <h3>Where does it come from?</h3>
//     <p>Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.</p>
//     <button class="remove-button">[x]</button>
//   </div>
//   <div class="pane">
//     <h3>Why do we use it?</h3>
//     <p>It is a long established fact that a reader will be distracted by the readable con

// Створіть дерево, яке по кліку на заголовок приховує-показує нащадків:
//
//   Вимоги:
//
//     Використовувати лише один обробник подій (застосувати делегування)
// Клік поза текстом заголовка (на порожньому місці) нічого не повинен робити.
//
//   Рішення складається з двох кроків:
//
//   Повертаємо текст кожного заголовка дерева елемент <span>. Потім ми можемо додати стилі CSS на :hover і обробляти кліки лише з тексті, т.к. ширина елемента <span> точно співпадає з шириною тексту.
//   Встановлюємо обробник на кореневий вузол дерева tree та ловимо кліки на елементах <span>, що містять заголовки.

// <!DOCTYPE HTML>
// <html>
//
// <head>
// <style>
// .tree span:hover {
//   font-weight: bold;
// }
//
// .tree span {
//   cursor: pointer;
// }
// </style>
// <meta charset="utf-8">
// </head>
//
// <body>
//
// <ul class="tree" id="tree">
//   <li>Animals
//     <ul>
//       <li>Mammals
//         <ul>
//           <li>Cows</li>
//           <li>Donkeys</li>
//           <li>Dogs</li>
//           <li

//jsfiddle.net/